// Code generated by hertz generator.

package main

import (
	"context"
	"github.com/Blue-Berrys/GoMall/app/frontend/infra/rpc"
	"github.com/Blue-Berrys/GoMall/app/frontend/middleware"
	frontendUtils "github.com/Blue-Berrys/GoMall/app/frontend/utlis"
	"github.com/Blue-Berrys/GoMall/common/mtl"
	prometheus "github.com/hertz-contrib/monitor-prometheus"
	"github.com/hertz-contrib/sessions"
	"github.com/hertz-contrib/sessions/redis"
	"github.com/joho/godotenv"
	"os"
	"time"

	"github.com/Blue-Berrys/GoMall/app/frontend/biz/router"
	"github.com/Blue-Berrys/GoMall/app/frontend/conf"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/app/middlewares/server/recovery"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/common/utils"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/hertz-contrib/cors"
	"github.com/hertz-contrib/gzip"
	"github.com/hertz-contrib/logger/accesslog"
	hertzlogrus "github.com/hertz-contrib/logger/logrus"                       //不带链路
	hertzobslogrus "github.com/hertz-contrib/obs-opentelemetry/logging/logrus" //带链路
	hertzotelprovider "github.com/hertz-contrib/obs-opentelemetry/provider"
	hertztracing "github.com/hertz-contrib/obs-opentelemetry/tracing"
	"github.com/hertz-contrib/pprof"
	"go.uber.org/zap/zapcore"
	"gopkg.in/natefinch/lumberjack.v2"
)

var (
	ServiceName  = frontendUtils.ServiceName
	MetricsPort  = conf.GetConf().Hertz.MetricsPort
	RegistryAddr = conf.GetConf().Hertz.RegistryAddr
)

func main() {
	if err := godotenv.Load(); err != nil {
		panic(err)
	}
	consul, registryInfo := mtl.InitMetric(ServiceName, MetricsPort, RegistryAddr)
	defer consul.Deregister(registryInfo) // 这个hertz在停止服务的时候可以移除(反注册)prometheus实例
	p := hertzotelprovider.NewOpenTelemetryProvider(
		hertzotelprovider.WithServiceName(ServiceName),
		//hertzotelprovider.WithExportEndpoint(),
		hertzotelprovider.WithInsecure(),
		hertzotelprovider.WithEnableMetrics(false),
	)
	defer p.Shutdown(context.Background())
	// 这样可以避免其他服务继续尝试访问已经下线的服务，从而防止出现请求失败或资源浪费。
	// dal.Init()
	rpc.Init()
	address := conf.GetConf().Hertz.Address

	tracer, cfg := hertztracing.NewServerTracer()

	h := server.New(server.WithHostPorts(address),
		server.WithTracer(prometheus.NewServerTracer("", "", prometheus.WithDisableServer(true),
			prometheus.WithRegistry(mtl.Registry),
		)),
		tracer,
	)

	h.Use(hertztracing.ServerMiddleware(cfg))

	registerMiddleware(h)

	router.GeneratedRegister(h)

	h.LoadHTMLGlob("template/*")
	h.Static("/static", "./")
	h.GET("/about", middleware.Auth(), func(c context.Context, ctx *app.RequestContext) {
		hlog.CtxInfof(c, "CloudWeGo shop about page") // Infof 是格式化输出日志的方法
		ctx.HTML(consts.StatusOK, "about", utils.H{"title": "About"})
	})
	h.GET("/sign-in", func(c context.Context, ctx *app.RequestContext) {
		data := utils.H{
			"Title": "Sign in",         // 在sign-in.templ中使用.Title才有效
			"Next":  ctx.Query("next"), //会从 ? 后面的查询参数中找到键为 next 的值
			// 如 GET /some-path?next=/dashboard
		}
		ctx.HTML(consts.StatusOK, "sign-in", data)
	})
	h.GET("/sign-up", func(c context.Context, ctx *app.RequestContext) {
		ctx.HTML(consts.StatusOK, "sign-up", utils.H{"Title": "Sign up"})
	})
	h.Spin()
}

func registerMiddleware(h *server.Hertz) {
	store, _ := redis.NewStore(10, "tcp", conf.GetConf().Redis.Address, "", []byte(os.Getenv("SESSION_SECRET")))
	h.Use(sessions.New("cloudwegoshop", store))
	// log
	// hertzlogrus.NewLogger() 实际返回了一个 Hertz 兼容的日志对象。
	// hertzobslogrus.NewLogger() 这是为 OpenTelemetry 的日志系统 提供的 logrus 适配器。
	// OpenTelemetry 的日志系统需要一个 Logger，用于记录与分布式追踪相关的上下文信息。
	logger := hertzobslogrus.NewLogger(hertzobslogrus.WithLogger(hertzlogrus.NewLogger().Logger()))
	hlog.SetLogger(logger)
	hlog.SetLevel(conf.LogLevel())
	var flushInterVal time.Duration
	if os.Getenv("GO_ENV") == "online" {
		flushInterVal = time.Minute
	} else {
		flushInterVal = time.Second
	}
	asyncWriter := &zapcore.BufferedWriteSyncer{
		WS: zapcore.AddSync(&lumberjack.Logger{
			Filename:   conf.GetConf().Hertz.LogFileName,
			MaxSize:    conf.GetConf().Hertz.LogMaxSize,
			MaxBackups: conf.GetConf().Hertz.LogMaxBackups,
			MaxAge:     conf.GetConf().Hertz.LogMaxAge,
		}),
		FlushInterval: flushInterVal, // 修改刷新时间
	}
	hlog.SetOutput(asyncWriter)
	h.OnShutdown = append(h.OnShutdown, func(ctx context.Context) {
		asyncWriter.Sync()
	})

	// pprof
	if conf.GetConf().Hertz.EnablePprof {
		pprof.Register(h)
	}

	// gzip
	if conf.GetConf().Hertz.EnableGzip {
		h.Use(gzip.Gzip(gzip.DefaultCompression))
	}

	// access log
	if conf.GetConf().Hertz.EnableAccessLog {
		h.Use(accesslog.New())
	}

	// recovery
	h.Use(recovery.Recovery())

	// cores
	h.Use(cors.Default())

	middleware.Register(h)
}
